{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nconst storeInitialState = {\n  lastUpdate: 0,\n  light: false,\n  count: 0,\n  form: {\n    fullName: \"\",\n    email: \"\",\n    password: \"\"\n  },\n  exampleData: [],\n  error: null\n};\nexport const actionTypes = {\n  Submit: \"Submit\",\n  RESET: \"RESET\"\n}; // REDUCERS\n\nexport const reducer = (state = storeInitialState, action) => {\n  switch (action.type) {\n    case actionTypes.Submit:\n      return Object.assign({}, state, {\n        form: action.form\n      });\n\n    case actionTypes.RESET:\n      return Object.assign({}, state, {\n        form: {\n          fullName: \"\",\n          email: \"\",\n          password: \"\"\n        }\n      });\n\n    default:\n      return state;\n  }\n};\nexport const SubmitForm = data => {\n  return {\n    type: actionTypes.Submit,\n    data\n  };\n};\nconst persistConfig = {\n  key: \"primary\",\n  storage,\n  whitelist: [\"form\"] // place to select which state you want to persist\n\n};\nconst persistedReducer = persistReducer(persistConfig, reducer);\nexport function initializeStore(initialState = storeInitialState) {\n  return createStore(persistedReducer, initialState, composeWithDevTools(applyMiddleware()));\n}","map":{"version":3,"sources":["/Users/tcc/Desktop/uxbreit - interview/with-redux/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","persistReducer","storage","storeInitialState","lastUpdate","light","count","form","fullName","email","password","exampleData","error","actionTypes","Submit","RESET","reducer","state","action","type","Object","assign","SubmitForm","data","persistConfig","key","whitelist","persistedReducer","initializeStore","initialState"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,UAAU,EAAE,CADY;AAExBC,EAAAA,KAAK,EAAE,KAFiB;AAGxBC,EAAAA,KAAK,EAAE,CAHiB;AAIxBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE,EADN;AAEJC,IAAAA,KAAK,EAAE,EAFH;AAGJC,IAAAA,QAAQ,EAAE;AAHN,GAJkB;AASxBC,EAAAA,WAAW,EAAE,EATW;AAUxBC,EAAAA,KAAK,EAAE;AAViB,CAA1B;AAYA,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,MAAM,EAAE,QADiB;AAGzBC,EAAAA,KAAK,EAAE;AAHkB,CAApB,C,CAMP;;AACA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGd,iBAAT,EAA4Be,MAA5B,KAAuC;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,WAAW,CAACC,MAAjB;AACE,aAAOM,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC9BV,QAAAA,IAAI,EAAEW,MAAM,CAACX;AADiB,OAAzB,CAAP;;AAIF,SAAKM,WAAW,CAACE,KAAjB;AACE,aAAOK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC9BV,QAAAA,IAAI,EAAE;AACJC,UAAAA,QAAQ,EAAE,EADN;AAEJC,UAAAA,KAAK,EAAE,EAFH;AAGJC,UAAAA,QAAQ,EAAE;AAHN;AADwB,OAAzB,CAAP;;AAQF;AACE,aAAOO,KAAP;AAhBJ;AAkBD,CAnBM;AAoBP,OAAO,MAAMK,UAAU,GAAIC,IAAD,IAAU;AAClC,SAAO;AAAEJ,IAAAA,IAAI,EAAEN,WAAW,CAACC,MAApB;AAA4BS,IAAAA;AAA5B,GAAP;AACD,CAFM;AAIP,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,SADe;AAEpBvB,EAAAA,OAFoB;AAGpBwB,EAAAA,SAAS,EAAE,CAAC,MAAD,CAHS,CAGC;;AAHD,CAAtB;AAMA,MAAMC,gBAAgB,GAAG1B,cAAc,CAACuB,aAAD,EAAgBR,OAAhB,CAAvC;AAEA,OAAO,SAASY,eAAT,CAAyBC,YAAY,GAAG1B,iBAAxC,EAA2D;AAChE,SAAOL,WAAW,CAChB6B,gBADgB,EAEhBE,YAFgB,EAGhB7B,mBAAmB,CAACD,eAAe,EAAhB,CAHH,CAAlB;AAKD","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst storeInitialState = {\n  lastUpdate: 0,\n  light: false,\n  count: 0,\n  form: {\n    fullName: \"\",\n    email: \"\",\n    password: \"\",\n  },\n  exampleData: [],\n  error: null,\n};\nexport const actionTypes = {\n  Submit: \"Submit\",\n\n  RESET: \"RESET\",\n};\n\n// REDUCERS\nexport const reducer = (state = storeInitialState, action) => {\n  switch (action.type) {\n    case actionTypes.Submit:\n      return Object.assign({}, state, {\n        form: action.form,\n      });\n\n    case actionTypes.RESET:\n      return Object.assign({}, state, {\n        form: {\n          fullName: \"\",\n          email: \"\",\n          password: \"\",\n        },\n      });\n\n    default:\n      return state;\n  }\n};\nexport const SubmitForm = (data) => {\n  return { type: actionTypes.Submit, data };\n};\n\nconst persistConfig = {\n  key: \"primary\",\n  storage,\n  whitelist: [\"form\"], // place to select which state you want to persist\n};\n\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nexport function initializeStore(initialState = storeInitialState) {\n  return createStore(\n    persistedReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware())\n  );\n}\n"]},"metadata":{},"sourceType":"module"}